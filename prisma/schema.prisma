generator client {
  provider = "prisma-client-js"
  previewFeatures = ["typedSql", "omitApi"]
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model branch_office {
  id                  Int             @id @default(autoincrement())
  name                String          @db.VarChar(127)
  isCanteen           Boolean         @default(false) 
  address             String          @db.VarChar(127)
  servingCanteen      branch_office?  @relation("branch_officeToserving_canteen", fields: [servingCanteenId], references: [id])
  servingCanteenId    Int?
  servedOffices      branch_office[] @relation("branch_officeToserving_canteen")
  dishes              dish[]
  employees           employee[]
  providedMenus       menu[]
  consumedMenus       menu[] @relation("MenuForConsumption")
}

model dish {
  id                 Int             @id @default(autoincrement())
  name               String          @db.VarChar(127)
  description        String          @db.VarChar(255)
  quantity           String          @db.VarChar(63)
  calorieContent     String          @db.VarChar(63)
  proteins           Int?
  fats               Int?
  carbohydrates      Int?
  bestBeforeDate     String?         @db.VarChar(63)
  externalProducer   String?         @db.VarChar(127)
  providingCanteen   branch_office   @relation(fields: [providingCanteenId], references: [id])
  providingCanteenId Int
  image              image?          @relation(fields: [imageId], references: [id])
  imageId            Int?
  dish_category      dish_category?  @relation(fields: [categoryId], references: [id])
  categoryId         Int?
  menu_position      menu_position[]
}

model dish_category {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar(255) @unique
  dish dish[]
}

model employee {
  id              Int           @id @default(autoincrement())
  surname         String        @db.VarChar(63)
  personnelNumber String        @db.VarChar(31)
  name            String        @default("-") @db.VarChar(63)
  patronymic      String        @default("-") @db.VarChar(63)
  active          Boolean
  officeId        Int
  branch_office   branch_office @relation(fields: [officeId], references: [id])
  user            user?
  
  @@unique([surname, personnelNumber, officeId])
}

model image {
  id           Int      @id @default(autoincrement())
  path         String   @db.VarChar(255)
  name         String   @db.VarChar(255)
  uploaded     DateTime @default(now())
  dish         dish[]
  user         user?    @relation(fields: [authorId], references: [id])
  authorId     Int? 
}

model menu {
  id                                Int           @id @default(autoincrement())
  relevantFrom                      DateTime                           
  expire                            DateTime                   
  name                              String        @db.VarChar(127)
  created                           DateTime      @default(now()) 
  changed                           DateTime      @updatedAt
  providingCanteen_office           branch_office @relation(fields: [providingCanteenId], references: [id])
  providingCanteenId                Int
  user                              user?         @relation(fields: [authorId], references: [id])
  authorId                          Int?
  menu_positions                    menu_position[]
  served_offices                    branch_office[] @relation(name: "MenuForConsumption")
}

model menu_position {
  id                                Int                                 @id @default(autoincrement())
  price                             Int
  discount                          Int                                 @default(0)
  menus                             menu[]
  dish                              dish                                @relation(fields: [dishId], references: [id])
  dishId                            Int
  order_to_menu_position            order_to_menu_position[]
}

model order {
  id                     Int                      @id @default(autoincrement())
  issued                 DateTime                 @db.Date
  number                 Int
  fullPrice              Int
  order_status           order_status             @relation(fields: [statusId], references: [id])
  statusId               Int
  user                   user                     @relation(fields: [clientId], references: [id])
  clientId               Int
  order_to_menu_position order_to_menu_position[]
  updated                DateTime  @updatedAt
  created                DateTime  @default(now())

  @@unique([number, issued])
}

model order_status {
  id        Int     @id @default(autoincrement())
  name      String  @db.VarChar(127) @unique
  active    Boolean @default(true)
  canCancel Boolean @default(false) 
  order     order[]
}

model order_to_menu_position {
  orderToMenuPositionId Int           @id @default(autoincrement())
  count                 Int
  menu_position         menu_position @relation(fields: [menuPositionId], references: [id])
  menuPositionId        Int
  order                 order         @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId               Int
}

model user {
  id                        Int       @id @default(autoincrement())
  login                     String    @unique() @db.VarChar(127)
  password                  String    @db.VarChar(255)
  email                     String    @unique() @db.VarChar(255)
  role                      user_role @default(client)
  isPasswordTemporary       Boolean   @default(true)
  verificationEmailSendTime DateTime? 
  lastPasswordResetTime     DateTime?
  image                     image[]
  menu                      menu[]
  order                     order[]
  employee                  employee  @relation(fields: [employeeId], references: [id])
  employeeId       Int      @unique()
  registered                DateTime  @default(now())
  changed                   DateTime  @updatedAt @default(now())
}

enum user_role {
  client
  deliveryman
  orderIssuing
  menuModerator
  CExport       @map("1CExport")
  admin
}
